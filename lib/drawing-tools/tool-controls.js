// Generated by CoffeeScript 1.7.1
(function() {
  var BaseToolControls, Task, ToolControls,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseToolControls = require('marking-surface').ToolControls;

  Task = require('zooniverse-decision-tree').Task;

  ToolControls = (function(_super) {
    __extends(ToolControls, _super);

    ToolControls.prototype.template = require('../templates/tool-controls')();

    ToolControls.prototype.details = null;

    ToolControls.prototype.taskTypes = {
      radio: require('../tasks/radio'),
      checkbox: require('../tasks/checkbox')
    };

    function ToolControls() {
      this.detailTasks = {};
      ToolControls.__super__.constructor.apply(this, arguments);
      this.addEvent('click', 'button[name="readymade-destroy-drawing"]', [this.tool.mark, 'destroy']);
      this.addEvent('change', this.onChange);
      setTimeout((function(_this) {
        return function() {
          var detail, _i, _len, _ref, _results;
          if (_this.details != null) {
            _ref = _this.details;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              detail = _ref[_i];
              _results.push(_this.addDetail(detail));
            }
            return _results;
          }
        };
      })(this));
    }

    ToolControls.prototype.addDetail = function(detail) {
      var form;
      form = this.el.querySelector('form');
      if (!(detail instanceof Task)) {
        detail = new this.taskTypes[detail.type](detail);
      }
      this.detailTasks[detail.key] = detail;
      detail.renderTemplate();
      detail.show();
      return form.appendChild(detail.el);
    };

    ToolControls.prototype.onChange = function(e) {
      var key, task, _ref, _results;
      _ref = this.detailTasks;
      _results = [];
      for (key in _ref) {
        task = _ref[key];
        _results.push(this.tool.mark.set(key, task.getValue()));
      }
      return _results;
    };

    ToolControls.prototype.render = function() {
      return setTimeout((function(_this) {
        return function() {
          var key, task, _ref, _results;
          _ref = _this.detailTasks;
          _results = [];
          for (key in _ref) {
            task = _ref[key];
            _results.push(task.reset(_this.tool.mark[key]));
          }
          return _results;
        };
      })(this));
    };

    return ToolControls;

  })(BaseToolControls);

  module.exports = ToolControls;

}).call(this);
