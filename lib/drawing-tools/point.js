// Generated by CoffeeScript 1.7.1
(function() {
  var BasePoint, Point, SVG,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BasePoint = require('marking-surface/lib/tools/point');

  SVG = require('marking-surface').SVG;

  Point = (function(_super) {
    __extends(Point, _super);

    Point.Controls = require('./tool-controls');

    Point.prototype.unit = '';

    Point.prototype.upp = 0;

    Point.prototype.precision = 0;

    function Point() {
      Point.__super__.constructor.apply(this, arguments);
      this.coordsGroup = SVG.prototype.addShape.call(this, 'g.readymade-coordinates-label');
      this.coordsRect = this.coordsGroup.addShape('rect', {
        x: -5
      });
      this.coordsLabel = this.coordsGroup.addShape('text');
    }

    Point.prototype.rescale = function(scale) {
      var fontSize;
      Point.__super__.rescale.apply(this, arguments);
      this.coordsLabel.el.style.fontSize = '';
      fontSize = parseFloat(getComputedStyle(this.coordsLabel.el).fontSize);
      return this.coordsLabel.el.style.fontSize = "" + (fontSize / scale) + "px";
    };

    Point.prototype.render = function() {
      var labelBox, labelX, labelY, x, y;
      Point.__super__.render.apply(this, arguments);
      this.attr('data-show-coordinates', (this.unit && this.upp) || null);
      x = (this.mark.x / this.upp).toFixed(this.precision) + this.unit;
      y = (this.mark.y / this.upp).toFixed(this.precision) + this.unit;
      this.coordsLabel.attr('textContent', "" + x + ", " + y);
      labelBox = this.coordsLabel.el.getBBox();
      this.coordsRect.attr({
        y: -labelBox.height - 5,
        width: labelBox.width + 5,
        height: labelBox.height + 10
      });
      labelX = labelBox.width / -2;
      labelY = labelBox.height + parseFloat(this.disc.attr('r') || this.radius);
      return this.coordsGroup.attr('transform', "translate(" + (Math.floor(labelX)) + ", " + (Math.floor(labelY)) + ")");
    };

    return Point;

  })(BasePoint);

  module.exports = Point;

}).call(this);
