// Generated by CoffeeScript 1.7.1
(function() {
  var Dropdown, FilterTask, RadioTask, choiceTemplate,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  RadioTask = require('./radio');

  Dropdown = require('zooniverse/controllers/dropdown');

  choiceTemplate = require('../templates/choice');

  FilterTask = (function(_super) {
    __extends(FilterTask, _super);

    FilterTask.type = 'filter';

    FilterTask.prototype.filters = null;

    FilterTask.prototype.currentFilters = null;

    FilterTask.prototype.buttons = null;

    FilterTask.prototype.menus = null;

    FilterTask.prototype.clearButtons = null;

    FilterTask.prototype.dropdowns = null;

    FilterTask.prototype.filtersTemplate = function() {
      var filter, i, v, value;
      return "<div class='readymade-classification-filters'> " + (((function() {
        var _i, _len, _ref, _results;
        _ref = this.filters;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          filter = _ref[i];
          _results.push("<div class='readymade-classification-filter'> <button name='" + filter.key + "' class='readymade-filter-button'>" + filter.label + "</button> <div class='readymade-filter-menu'> <form> " + (((function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = filter.values;
            _results1 = [];
            for (v = _j = 0, _len1 = _ref1.length; _j < _len1; v = ++_j) {
              value = _ref1[v];
              _results1.push(this.valueTemplate(filter, value, v));
            }
            return _results1;
          }).call(this)).join('\n')) + " " + (this.valueTemplate({
            key: filter.key,
            type: 'button'
          }, {
            label: '&times;',
            value: ''
          }, 0)) + " </form> </div> </div>");
        }
        return _results;
      }).call(this)).join('\n')) + " </div>";
    };

    FilterTask.prototype.valueTemplate = function(filter, value, i) {
      filter = Object.create(filter);
      if (filter.type == null) {
        filter.type = 'radio';
      }
      return choiceTemplate.call(filter, value, i);
    };

    function FilterTask() {
      FilterTask.__super__.constructor.apply(this, arguments);
      if (this.currentFilters == null) {
        this.currentFilters = {};
      }
      this.reflectFilter();
    }

    FilterTask.prototype.renderTemplate = function() {
      var filtersEl, i, menu, questionEl;
      FilterTask.__super__.renderTemplate.apply(this, arguments);
      questionEl = this.el.querySelector('.decision-tree-question');
      questionEl.insertAdjacentHTML('afterEnd', this.filtersTemplate());
      filtersEl = this.el.querySelector('.readymade-classification-filters');
      this.buttons = Array.prototype.slice.call(filtersEl.querySelectorAll('.readymade-filter-button'));
      this.menus = Array.prototype.slice.call(filtersEl.querySelectorAll('.readymade-filter-menu'));
      this.clearButtons = (function() {
        var _i, _len, _ref, _results;
        _ref = this.menus;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          menu = _ref[_i];
          _results.push(menu.querySelector('input[type="button"][value=""]'));
        }
        return _results;
      }).call(this);
      return this.dropdowns = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.buttons.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(new Dropdown({
            button: this.buttons[i],
            menu: this.menus[i],
            buttonPinning: [1, 1],
            menuPinning: [1, 0]
          }));
        }
        return _results;
      }).call(this);
    };

    FilterTask.prototype.enter = function() {
      var i, _i, _ref, _results;
      FilterTask.__super__.enter.apply(this, arguments);
      _results = [];
      for (i = _i = 0, _ref = this.menus.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.menus[i].addEventListener('change', this);
        _results.push(this.clearButtons[i].addEventListener('click', this));
      }
      return _results;
    };

    FilterTask.prototype.exit = function() {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.menus.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.menus[i].removeEventListener('change', this);
        this.clearButtons[i].removeEventListener('click', this);
      }
      return FilterTask.__super__.exit.apply(this, arguments);
    };

    FilterTask.prototype.handleEvent = function(e) {
      var _ref, _ref1;
      if (e.type === 'change' && (_ref = e.currentTarget, __indexOf.call(this.menus, _ref) >= 0)) {
        this.handleFilterChange(this.menus.indexOf(e.currentTarget));
        return Dropdown.closeAll();
      } else if (e.type === 'click' && (_ref1 = e.currentTarget, __indexOf.call(this.clearButtons, _ref1) >= 0)) {
        return this.clearFilter(this.clearButtons.indexOf(e.currentTarget));
      } else {
        return FilterTask.__super__.handleEvent.apply(this, arguments);
      }
    };

    FilterTask.prototype.handleFilterChange = function(index) {
      var checked, valueIndex;
      checked = this.menus[index].querySelector(':checked');
      if (checked) {
        valueIndex = checked.getAttribute('data-choice-index');
        this.currentFilters[this.filters[index].key] = this.filters[index].values[valueIndex].value;
      }
      return this.reflectFilter(this.currentFilters);
    };

    FilterTask.prototype.clearFilter = function(index) {
      var _ref;
      if ((_ref = this.menus[index].querySelector(':checked')) != null) {
        _ref.checked = false;
      }
      delete this.currentFilters[this.filters[index].key];
      return this.reflectFilter(this.currentFilters);
    };

    FilterTask.prototype.reflectFilter = function(filterSettings) {
      var choice, choiceEls, i, key, value, _i, _len, _results;
      choiceEls = this.el.querySelectorAll('[data-choice-index]');
      _results = [];
      for (i = _i = 0, _len = choiceEls.length; _i < _len; i = ++_i) {
        choice = choiceEls[i];
        choice.removeAttribute('data-filtered');
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (key in filterSettings) {
            value = filterSettings[key];
            if (__indexOf.call(this.choices[i].traits[key], value) < 0) {
              _results1.push(choice.setAttribute('data-filtered', true));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return FilterTask;

  })(RadioTask);

  module.exports = FilterTask;

}).call(this);
