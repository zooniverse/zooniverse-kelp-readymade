// Generated by CoffeeScript 1.7.1
(function() {
  var Controller, MarkingSurface, SubjectViewer, loadImage,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __modulo = function(a, b) { return (a % b + +b) % b; };

  Controller = require('zooniverse/controllers/base-controller');

  MarkingSurface = require('marking-surface');

  loadImage = require('./lib/load-image');

  SubjectViewer = (function(_super) {
    __extends(SubjectViewer, _super);

    SubjectViewer.prototype.className = 'readymade-subject-viewer';

    SubjectViewer.prototype.template = require('./templates/subject-viewer');

    SubjectViewer.prototype.currentFrame = 0;

    SubjectViewer.prototype.advanceTimeout = NaN;

    SubjectViewer.prototype.taskIndex = -1;

    SubjectViewer.prototype.toolOptions = null;

    SubjectViewer.prototype.FROM_CURRENT_TASK = 'data-from-current-task';

    SubjectViewer.prototype.elements = {
      '.readymade-marking-surface-container': 'markingSurfaceContainer',
      '.readymade-frame-controls': 'frameControls',
      'button[name="play-frames"]': 'playButton',
      'button[name="pause-frames"]': 'pauseButton',
      '.readymade-frame-toggles-list': 'togglesList'
    };

    function SubjectViewer() {
      SubjectViewer.__super__.constructor.apply(this, arguments);
      this.createMarkingSurface();
    }

    SubjectViewer.prototype.createMarkingSurface = function() {
      this.markingSurface = new MarkingSurface;
      this.frameGroup = this.markingSurface.addShape('g.frames');
      this.frames = [];
      this.markingSurface.on('add-tool', (function(_this) {
        return function(tool) {
          var color, property, value, _ref, _ref1, _ref2;
          tool.attr(_this.FROM_CURRENT_TASK, true);
          color = (_ref = _this.toolOptions) != null ? _ref.color : void 0;
          if (color != null) {
            tool.el.style.color = color;
          }
          tool.unit = _this.toolOptions.unit;
          tool.upp = _this.toolOptions.upp;
          if ((_ref1 = tool.controls) != null) {
            _ref1.details = _this.toolOptions.details;
          }
          if (_this.toolOptions != null) {
            _ref2 = _this.toolOptions;
            for (property in _ref2) {
              value = _ref2[property];
              tool[property] = value;
            }
          }
          tool.mark.set('_taskIndex', _this.taskIndex);
          if (_this.toolOptions.value != null) {
            tool.mark.set('value', _this.toolOptions.value);
          }
          return tool.mark.set('frame', _this.currentFrame);
        };
      })(this));
      return this.markingSurfaceContainer.append(this.markingSurface.el);
    };

    SubjectViewer.prototype.loadSubject = function(subject, callback) {
      var heights, i, imgSrc, subjectImages, widths, _fn, _i, _len, _ref;
      this.subject = subject;
      this.pauseFrames();
      this.markingSurface.reset();
      while (this.frames.length !== 0) {
        this.frames.pop().remove();
      }
      this.togglesList.empty();
      widths = [];
      heights = [];
      subjectImages = (_ref = this.subject.location.standard) != null ? _ref : this.subject.location;
      subjectImages = [].concat(subjectImages);
      _fn = (function(_this) {
        return function(i) {
          _this.addFrame(imgSrc, function(image) {
            var maxHeight, maxWidth;
            widths.push(image.attr('width'));
            heights.push(image.attr('height'));
            maxWidth = Math.max.apply(Math, widths);
            maxHeight = Math.max.apply(Math, heights);
            _this.markingSurface.svg.attr({
              viewBox: "0 0 " + maxWidth + " " + maxHeight
            });
            _this.frameGroup.attr({
              transform: "translate(" + (maxWidth / 2) + ", " + (maxHeight / 2) + ")"
            });
            if (i + 1 === subjectImages.length) {
              _this.goTo(0);
              return typeof callback === "function" ? callback() : void 0;
            }
          });
          return _this.addToggle(i);
        };
      })(this);
      for (i = _i = 0, _len = subjectImages.length; _i < _len; i = ++_i) {
        imgSrc = subjectImages[i];
        _fn(i);
      }
      return this.frameControls.attr('data-single-frame', (subjectImages.length === 1) || null);
    };

    SubjectViewer.prototype.loadClassification = function(classification, callback) {
      return typeof callback === "function" ? callback() : void 0;
    };

    SubjectViewer.prototype.addFrame = function(imgSrc, callback) {
      return loadImage(imgSrc, (function(_this) {
        return function(_arg) {
          var height, image, src, width;
          src = _arg.src, width = _arg.width, height = _arg.height;
          image = _this.frameGroup.addShape('image', {
            'xlink:href': src,
            width: width,
            height: height,
            x: width / -2,
            y: height / -2
          });
          _this.frames.push(image);
          return typeof callback === "function" ? callback(image) : void 0;
        };
      })(this));
    };

    SubjectViewer.prototype.addToggle = function(index) {
      return this.togglesList.append("<button name='toggle-frame' value='" + index + "' class='toggle-frame'>" + (index + 1) + "</button>\n");
    };

    SubjectViewer.prototype.goTo = function(currentFrame) {
      var buttons;
      this.currentFrame = currentFrame;
      this.currentFrame = __modulo(this.currentFrame, this.frames.length);
      this.frames[this.currentFrame].toFront();
      buttons = this.togglesList.find('button');
      buttons.attr('data-selected', null);
      buttons.eq(this.currentFrame).attr('data-selected', true);
      return this.el.trigger('change-frame', [this.currentFrame]);
    };

    SubjectViewer.prototype.playFrames = function() {
      this.playButton.prop('disabled', true);
      this.pauseButton.prop('disabled', false);
      return this.advanceFrames();
    };

    SubjectViewer.prototype.advanceFrames = function() {
      this.goTo(this.currentFrame + 1);
      return this.advanceTimeout = setTimeout(this.advanceFrames.bind(this), 250);
    };

    SubjectViewer.prototype.pauseFrames = function() {
      clearTimeout(this.advanceTimeout);
      this.playButton.prop('disabled', false);
      return this.pauseButton.prop('disabled', true);
    };

    SubjectViewer.prototype.setTaskIndex = function(taskIndex) {
      var tool, _i, _ref, _results;
      this.taskIndex = taskIndex;
      _ref = this.markingSurface.tools;
      _results = [];
      for (_i = _ref.length - 1; _i >= 0; _i += -1) {
        tool = _ref[_i];
        _results.push(tool.attr(this.FROM_CURRENT_TASK, (tool.mark._taskIndex === this.taskIndex) || null));
      }
      return _results;
    };

    SubjectViewer.prototype.setTool = function(tool, options) {
      this.markingSurface.tool = tool;
      return this.toolOptions = options;
    };

    SubjectViewer.prototype.getMarks = function() {
      var mark, marks, _i, _len, _name, _ref;
      marks = {};
      _ref = this.markingSurface.tools;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mark = _ref[_i].mark;
        if (marks[_name = mark.step] == null) {
          marks[_name] = [];
        }
        marks[mark.step].push(mark);
      }
      return marks;
    };

    SubjectViewer.prototype.events = {
      'click button[name="play-frames"]': function() {
        this.playFrames();
        return this.pauseButton.focus();
      },
      'click button[name="pause-frames"]': function() {
        this.pauseFrames();
        return this.playButton.focus();
      },
      'click button[name="toggle-frame"]': function(e) {
        return this.goTo(e.currentTarget.value);
      }
    };

    return SubjectViewer;

  })(Controller);

  module.exports = SubjectViewer;

}).call(this);
