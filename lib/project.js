// Generated by CoffeeScript 1.7.1
(function() {
  var Api, ClassifyPage, Profile, Project, SiteBackground, SiteHeader, StackOfPages, TopBar, User, dash, homePageTemplate, teamPageTemplate;

  Api = require('zooniverse/lib/api');

  TopBar = require('zooniverse/controllers/top-bar');

  SiteBackground = require('./site-background');

  SiteHeader = require('./site-header');

  StackOfPages = require('stack-of-pages');

  homePageTemplate = require('./templates/home-page');

  dash = require('./lib/dash');

  ClassifyPage = require('./classify-page');

  Profile = require('zooniverse/controllers/profile');

  teamPageTemplate = require('./templates/team-page');

  User = require('zooniverse/models/user');

  Project = (function() {
    Project.prototype.parent = document.body;

    Project.prototype.background = '';

    Project.prototype.id = '';

    Project.prototype.producer = '';

    Project.prototype.title = '';

    Project.prototype.summary = '';

    Project.prototype.description = '';

    Project.prototype.about = '';

    Project.prototype.pages = null;

    Project.prototype.workflows = null;

    Project.prototype.tasks = null;

    Project.prototype.firstTask = '';

    Project.prototype.subjectGroup = false;

    Project.prototype.organizations = null;

    Project.prototype.scientists = null;

    Project.prototype.developers = null;

    function Project(configuration) {
      var content, firstTask, key, label, page, property, subjectGroup, tasks, title, value, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
      if (configuration == null) {
        configuration = {};
      }
      for (property in configuration) {
        value = configuration[property];
        this[property] = value;
      }
      if (this.background) {
        this.siteBackground = new SiteBackground({
          src: this.background
        });
        this.siteBackground.el.appendTo(document.body);
      }
      if (this.id) {
        this.connect(this.id);
      }
      this.header = new SiteHeader({
        template: SiteHeader.prototype.template(this)
      });
      this.stack = new StackOfPages;
      this.stack.el.className += ' readymade-main-stack';
      if (this.summary || this.description) {
        this.addPage('#/', 'Home', homePageTemplate(this));
      }
      this.classifyPages = [];
      if (this.workflows != null) {
        _ref = this.workflows;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], key = _ref1.key, label = _ref1.label, subjectGroup = _ref1.subjectGroup, tasks = _ref1.tasks, firstTask = _ref1.firstTask;
          if (label == null) {
            label = 'Classify';
          }
          if (key == null) {
            key = dash(label).replace(/\-/g, '_');
          }
          page = new ClassifyPage({
            subjectGroup: subjectGroup != null ? subjectGroup : this.subjectGroup,
            workflow: key,
            tasks: tasks,
            firstTask: firstTask
          });
          this.addPage("#/" + (dash(label)), label, page);
          this.classifyPages.push(page);
        }
      } else if (this.tasks != null) {
        page = new ClassifyPage({
          tasks: this.tasks,
          firstTask: this.firstTask,
          subjectGroup: this.subjectGroup
        });
        this.addPage('#/classify', 'Classify', page);
        this.classifyPages.push(page);
      }
      if (this.profile !== false) {
        this.profile = new Profile;
        this.addPage('#/profile', 'Profile', this.profile);
      }
      if (this.pages != null) {
        _ref2 = this.pages;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          page = _ref2[_j];
          for (title in page) {
            content = page[title];
            this.addPage("#/" + (dash(title)), title, "<div class='readymade-generic-page' data-readymade-page='" + (dash(title)) + "'>" + content + "</div>");
          }
        }
      }
      if (this.organizations || this.scientists || this.developers) {
        this.addPage('#/team', 'Team', teamPageTemplate(this));
      }
      if (this.parent != null) {
        this.header.el.appendTo(this.parent);
      }
      if ((_ref3 = this.parent) != null) {
        _ref3.appendChild(this.stack.el);
      }
      this.stack.onHashChange();
      User.fetch();
    }

    Project.prototype.connect = function(project) {
      this.api = new Api({
        project: project
      });
      this.topBar = new TopBar;
      return this.topBar.el.appendTo(document.body);
    };

    Project.prototype.addPage = function(href, label, content) {
      this.stack.add(href, content);
      return this.header.addNavLink(href, label);
    };

    return Project;

  })();

  module.exports = Project;

}).call(this);
